// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_locations
arma::umat get_locations(arma::sp_mat& B);
RcppExport SEXP _rsetse_get_locations(SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(get_locations(B));
    return rcpp_result_gen;
END_RCPP
}
// all_dims_one_loc
arma::mat all_dims_one_loc(const arma::sp_mat& ten_mat, const arma::vec& kvect, const arma::vec& Hvect, const arma::vec& dvect, const arma::mat& dzvect, const arma::mat& net_tension);
RcppExport SEXP _rsetse_all_dims_one_loc(SEXP ten_matSEXP, SEXP kvectSEXP, SEXP HvectSEXP, SEXP dvectSEXP, SEXP dzvectSEXP, SEXP net_tensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ten_mat(ten_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kvect(kvectSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Hvect(HvectSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dvect(dvectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dzvect(dzvectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type net_tension(net_tensionSEXP);
    rcpp_result_gen = Rcpp::wrap(all_dims_one_loc(ten_mat, kvect, Hvect, dvect, dzvect, net_tension));
    return rcpp_result_gen;
END_RCPP
}
// core_while_loop_sparse_cpp
List core_while_loop_sparse_cpp(const double& max_iter, const double& sample, const arma::mat& network_dynamics, const arma::mat& elevation, const arma::uvec& non_empty_t_vect, const arma::uvec& non_empty_vect, const arma::vec& dvect, const arma::mat& velocity, const arma::mat& acceleration, const arma::mat& static_force, const arma::mat& force, const arma::mat& net_tension, const double tstep, const arma::sp_mat& ten_mat, const arma::vec& kvect, const double mass, const bool dynamic_reset, const double tstep_change, const arma::mat& net_force, const double coef_drag, const double static_limit, const double tol, const bool timeshift, const bool noisy_termination, const bool verbose_reporting);
RcppExport SEXP _rsetse_core_while_loop_sparse_cpp(SEXP max_iterSEXP, SEXP sampleSEXP, SEXP network_dynamicsSEXP, SEXP elevationSEXP, SEXP non_empty_t_vectSEXP, SEXP non_empty_vectSEXP, SEXP dvectSEXP, SEXP velocitySEXP, SEXP accelerationSEXP, SEXP static_forceSEXP, SEXP forceSEXP, SEXP net_tensionSEXP, SEXP tstepSEXP, SEXP ten_matSEXP, SEXP kvectSEXP, SEXP massSEXP, SEXP dynamic_resetSEXP, SEXP tstep_changeSEXP, SEXP net_forceSEXP, SEXP coef_dragSEXP, SEXP static_limitSEXP, SEXP tolSEXP, SEXP timeshiftSEXP, SEXP noisy_terminationSEXP, SEXP verbose_reportingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type network_dynamics(network_dynamicsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type non_empty_t_vect(non_empty_t_vectSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type non_empty_vect(non_empty_vectSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dvect(dvectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type velocity(velocitySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type acceleration(accelerationSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type static_force(static_forceSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type force(forceSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type net_tension(net_tensionSEXP);
    Rcpp::traits::input_parameter< const double >::type tstep(tstepSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type ten_mat(ten_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kvect(kvectSEXP);
    Rcpp::traits::input_parameter< const double >::type mass(massSEXP);
    Rcpp::traits::input_parameter< const bool >::type dynamic_reset(dynamic_resetSEXP);
    Rcpp::traits::input_parameter< const double >::type tstep_change(tstep_changeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type net_force(net_forceSEXP);
    Rcpp::traits::input_parameter< const double >::type coef_drag(coef_dragSEXP);
    Rcpp::traits::input_parameter< const double >::type static_limit(static_limitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type timeshift(timeshiftSEXP);
    Rcpp::traits::input_parameter< const bool >::type noisy_termination(noisy_terminationSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose_reporting(verbose_reportingSEXP);
    rcpp_result_gen = Rcpp::wrap(core_while_loop_sparse_cpp(max_iter, sample, network_dynamics, elevation, non_empty_t_vect, non_empty_vect, dvect, velocity, acceleration, static_force, force, net_tension, tstep, ten_mat, kvect, mass, dynamic_reset, tstep_change, net_force, coef_drag, static_limit, tol, timeshift, noisy_termination, verbose_reporting));
    return rcpp_result_gen;
END_RCPP
}
// all_dims_one_loc_dense
arma::mat all_dims_one_loc_dense(const arma::mat& ten_mat, const arma::vec& kvect, const arma::vec& Hvect, const arma::vec& dvect, const arma::mat& dzvect, const arma::mat& net_tension, const arma::uvec& non_empty_index_vec);
RcppExport SEXP _rsetse_all_dims_one_loc_dense(SEXP ten_matSEXP, SEXP kvectSEXP, SEXP HvectSEXP, SEXP dvectSEXP, SEXP dzvectSEXP, SEXP net_tensionSEXP, SEXP non_empty_index_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ten_mat(ten_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kvect(kvectSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Hvect(HvectSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dvect(dvectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dzvect(dzvectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type net_tension(net_tensionSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type non_empty_index_vec(non_empty_index_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(all_dims_one_loc_dense(ten_mat, kvect, Hvect, dvect, dzvect, net_tension, non_empty_index_vec));
    return rcpp_result_gen;
END_RCPP
}
// core_while_loop_dense_cpp
List core_while_loop_dense_cpp(const double& max_iter, const double& sample, const arma::mat& network_dynamics, const arma::mat& elevation, const arma::uvec& non_empty_t_vect, const arma::uvec& non_empty_vect, const arma::vec& dvect, const arma::mat& velocity, const arma::mat& acceleration, const arma::mat& static_force, const arma::mat& force, const arma::mat& net_tension, const double tstep, const arma::mat& ten_mat, const arma::vec& kvect, const double mass, const bool dynamic_reset, const double tstep_change, const arma::mat& net_force, const double coef_drag, const double static_limit, const double tol, const arma::uvec& non_empty_index_vec, const bool timeshift, const bool noisy_termination, const bool verbose_reporting);
RcppExport SEXP _rsetse_core_while_loop_dense_cpp(SEXP max_iterSEXP, SEXP sampleSEXP, SEXP network_dynamicsSEXP, SEXP elevationSEXP, SEXP non_empty_t_vectSEXP, SEXP non_empty_vectSEXP, SEXP dvectSEXP, SEXP velocitySEXP, SEXP accelerationSEXP, SEXP static_forceSEXP, SEXP forceSEXP, SEXP net_tensionSEXP, SEXP tstepSEXP, SEXP ten_matSEXP, SEXP kvectSEXP, SEXP massSEXP, SEXP dynamic_resetSEXP, SEXP tstep_changeSEXP, SEXP net_forceSEXP, SEXP coef_dragSEXP, SEXP static_limitSEXP, SEXP tolSEXP, SEXP non_empty_index_vecSEXP, SEXP timeshiftSEXP, SEXP noisy_terminationSEXP, SEXP verbose_reportingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type network_dynamics(network_dynamicsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type non_empty_t_vect(non_empty_t_vectSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type non_empty_vect(non_empty_vectSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dvect(dvectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type velocity(velocitySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type acceleration(accelerationSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type static_force(static_forceSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type force(forceSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type net_tension(net_tensionSEXP);
    Rcpp::traits::input_parameter< const double >::type tstep(tstepSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ten_mat(ten_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kvect(kvectSEXP);
    Rcpp::traits::input_parameter< const double >::type mass(massSEXP);
    Rcpp::traits::input_parameter< const bool >::type dynamic_reset(dynamic_resetSEXP);
    Rcpp::traits::input_parameter< const double >::type tstep_change(tstep_changeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type net_force(net_forceSEXP);
    Rcpp::traits::input_parameter< const double >::type coef_drag(coef_dragSEXP);
    Rcpp::traits::input_parameter< const double >::type static_limit(static_limitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type non_empty_index_vec(non_empty_index_vecSEXP);
    Rcpp::traits::input_parameter< const bool >::type timeshift(timeshiftSEXP);
    Rcpp::traits::input_parameter< const bool >::type noisy_termination(noisy_terminationSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose_reporting(verbose_reportingSEXP);
    rcpp_result_gen = Rcpp::wrap(core_while_loop_dense_cpp(max_iter, sample, network_dynamics, elevation, non_empty_t_vect, non_empty_vect, dvect, velocity, acceleration, static_force, force, net_tension, tstep, ten_mat, kvect, mass, dynamic_reset, tstep_change, net_force, coef_drag, static_limit, tol, non_empty_index_vec, timeshift, noisy_termination, verbose_reporting));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rsetse_get_locations", (DL_FUNC) &_rsetse_get_locations, 1},
    {"_rsetse_all_dims_one_loc", (DL_FUNC) &_rsetse_all_dims_one_loc, 6},
    {"_rsetse_core_while_loop_sparse_cpp", (DL_FUNC) &_rsetse_core_while_loop_sparse_cpp, 25},
    {"_rsetse_all_dims_one_loc_dense", (DL_FUNC) &_rsetse_all_dims_one_loc_dense, 7},
    {"_rsetse_core_while_loop_dense_cpp", (DL_FUNC) &_rsetse_core_while_loop_dense_cpp, 26},
    {NULL, NULL, 0}
};

RcppExport void R_init_rsetse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
